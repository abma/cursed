function gadget:GetInfo()
	return {
		name = "Buttons_TC.lua",
		desc = "Alters UI",
		author = "aZaremoth",
		date = "December 10th, 2008",
		license = "public domain",
		layer = 1,
		enabled = true,
		}
end

---------------------------------------------------------------------
local AllCursed = {
	[UnitDefNames.tc_acranius.id] = "tc_acranius",
	[UnitDefNames.tc_agares.id] = "tc_agares",
	[UnitDefNames.tc_belial.id] = "tc_belial",
	[UnitDefNames.tc_blade.id] = "tc_blade",
	[UnitDefNames.tc_bonebeast.id] = "tc_bonebeast",
	[UnitDefNames.tc_crawler.id] = "tc_crawler",
	[UnitDefNames.tc_cursedhand.id] = "tc_cursedhand",
	[UnitDefNames.tc_cursedhand_survival.id] = "tc_cursedhand_survival",	
	[UnitDefNames.tc_damnedportal.id] = "tc_damnedportal",
	[UnitDefNames.tc_darkassembler.id] = "tc_darkassembler",
	[UnitDefNames.tc_darkassembler_lvl2.id] = "tc_darkassembler_lvl2",
	[UnitDefNames.tc_darkassembler_lvl2_ai.id] = "tc_darkassembler_lvl2_ai",	
	[UnitDefNames.tc_defender.id] = "tc_defender",
	[UnitDefNames.tc_defender_survival.id] = "tc_defender_survival",	
	[UnitDefNames.tc_enforcer.id] = "tc_enforcer",
	[UnitDefNames.tc_ghoul.id] = "tc_ghoul",
	[UnitDefNames.tc_gunner.id] = "tc_gunner",
	[UnitDefNames.tc_heart.id] = "tc_heart",
	[UnitDefNames.tc_heart_ai.id] = "tc_heart_ai",
	[UnitDefNames.tc_kaboom.id] = "tc_kaboom",
	[UnitDefNames.tc_lich.id] = "tc_lich",
	[UnitDefNames.tc_lich_ai.id] = "tc_lich_ai",	
	[UnitDefNames.tc_lich_sum.id] = "tc_lich_sum",
	[UnitDefNames.tc_mage.id] = "tc_mage",
	[UnitDefNames.tc_mancubus.id] = "tc_mancubus",
	[UnitDefNames.tc_mermeoth.id] = "tc_mermeoth",
	[UnitDefNames.tc_metalextractor_lvl1.id] = "tc_metalextractor_lvl1",
	[UnitDefNames.tc_metalextractor_lvl2.id] = "tc_metalextractor_lvl2",
	[UnitDefNames.tc_necromancer.id] = "tc_necromancer",
	[UnitDefNames.tc_necromancer_sum.id] = "tc_necromancer_sum",
	[UnitDefNames.tc_obelisk.id] = "tc_obelisk",
	[UnitDefNames.tc_obelisk_lvl2.id] = "tc_obelisk_lvl2",
	[UnitDefNames.tc_pestilence.id] = "tc_pestilence",
	[UnitDefNames.tc_pitt.id] = "tc_pitt",	
	[UnitDefNames.tc_purgatory.id] = "tc_purgatory",
	[UnitDefNames.tc_purgatory_ai.id] = "tc_purgatory_ai",	
	[UnitDefNames.tc_pyramid.id] = "tc_pyramid",
	[UnitDefNames.tc_pyramid_ai.id] = "tc_pyramid_ai",
	[UnitDefNames.tc_redeemer.id] = "tc_redeemer",
	[UnitDefNames.tc_restless.id] = "tc_restless",
	[UnitDefNames.tc_rictus.id] = "tc_rictus",
	[UnitDefNames.tc_seeker.id] = "tc_seeker",
	[UnitDefNames.tc_seer.id] = "tc_seer",
	[UnitDefNames.tc_skeleton.id] = "tc_skeleton",
	[UnitDefNames.tc_sledgehammer.id] = "tc_sledgehammer",
	[UnitDefNames.tc_soulcage.id] = "tc_soulcage",
	[UnitDefNames.tc_soulstone.id] = "tc_soulstone",
	[UnitDefNames.tc_suicide.id] = "tc_suicide",
	[UnitDefNames.tc_dragon.id] = "tc_dragon",
	[UnitDefNames.tc_dragonqueen.id] = "tc_dragonqueen",	
	[UnitDefNames.tc_altar.id] = "tc_altar",
	[UnitDefNames.tc_witch.id] = "tc_witch",
	[UnitDefNames.tc_witch_shield.id] = "tc_witch_shield",
	[UnitDefNames.tc_totem_purple.id] = "tc_totem_purple",
	[UnitDefNames.tc_totem_black.id] = "tc_totem_black",
	[UnitDefNames.tc_totem_red.id] = "tc_totem_red",
	}

local NoDirectAttack = {
--	[UnitDefNames.tc_kaboom.id] = "tc_kaboom",
	[UnitDefNames.tc_pestilence.id] = "tc_pestilence",
	[UnitDefNames.tc_seeker.id] = "tc_seeker",
	[UnitDefNames.tc_seer.id] = "tc_seer",
	}

local ImmobileBuilder = {
	[UnitDefNames.tc_obelisk.id] = "tc_obelisk",
	[UnitDefNames.tc_obelisk_lvl2.id] = "tc_obelisk_lvl2",
	}

local ImmobileNoStandartButtons = {
	[UnitDefNames.tc_soulstone.id] = "tc_soulstone",
	[UnitDefNames.tc_soulcage.id] = "tc_soulcage",
	[UnitDefNames.tc_totem_purple.id] = "tc_totem_purple",
	[UnitDefNames.tc_totem_black.id] = "tc_totem_black",
	[UnitDefNames.tc_totem_red.id] = "tc_totem_red",
	[UnitDefNames.tc_metalextractor_lvl1.id] = "tc_metalextractor_lvl1",
	[UnitDefNames.tc_metalextractor_lvl2.id] = "tc_metalextractor_lvl2",
	}

local CanNotLand = {
	[UnitDefNames.tc_seer.id] = "tc_seer",
	[UnitDefNames.tc_redeemer.id] = "tc_redeemer",
	[UnitDefNames.tc_dragon.id] = "tc_dragon",
	}

local HeartofDarkness = {
	[UnitDefNames.tc_heart.id] = "tc_heart",
	}


---------------------------------------------------------------------
if (gadgetHandler:IsSyncedCode()) then
---------------------------------------------------------------------
function gadget:UnitCreated(u, ud, team)
	if AllCursed [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.ATTACK)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				onlyTexture=true,  
      			name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/attack.png",
			})
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.AREA_ATTACK)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				onlyTexture=true,  
      			name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/areaattack.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.RESURRECT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",		
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/resurrect.png",
			})
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.AUTOREPAIRLEVEL)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.IDLEMODE)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.CAPTURE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",		 
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/capture.png",
			})
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.CLOAK)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.STOCKPILE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.GUARD)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				onlyTexture=true,   
     				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/defend.png",
			})
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.STOP)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/stopp.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.WAIT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/wait.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.PATROL)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/patrol.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.MOVE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/move.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.FIGHT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/fight.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.REPAIR)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/heal.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.RESTORE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/restore.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.RECLAIM)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/reclaim.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.MOVE_STATE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.FIRE_STATE)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody2.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.ONOFF)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/empty.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.TRAJECTORY)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
				name="",
				onlyTexture=true,
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/trajectory_low.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.AISELECT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody2.png",
			})
		end		
		cmdID = Spring.FindUnitCmdDesc(u, CMD.GROUPSELECT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.GROUPADD)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody2.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.GROUPCLEAR)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
 				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/emptybloody.png",
			})
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.REPEAT)
		if cmdID ~= nil then
			Spring.EditUnitCmdDesc(u, cmdID, {
     				onlyTexture=true,		
				name = "",			
				texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/repeat.png",
			})
		end
	end

	if NoDirectAttack [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.ATTACK)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.AREA_ATTACK)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.FIGHT)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
	end

	if ImmobileBuilder [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.MOVE_STATE)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.FIGHT)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
	end

	if ImmobileNoStandartButtons [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.STOP)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end	
		cmdID = Spring.FindUnitCmdDesc(u, CMD.REPEAT)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.WAIT)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
	end

	if CanNotLand [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.AUTOREPAIRLEVEL)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
	end

	if HeartofDarkness [Spring.GetUnitDefID(u)] then
		local cmdID
		cmdID = Spring.FindUnitCmdDesc(u, CMD.RESTORE)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.FIGHT)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.MOVE_STATE)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.REPAIR)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
		cmdID = Spring.FindUnitCmdDesc(u, CMD.RECLAIM)
		if cmdID ~= nil then
			Spring.RemoveUnitCmdDesc(u, cmdID)
		end
	end
	
---------------------------------------------------------------------		
end

function gadget:AllowCommand(u, ud, team, cmd, param, opts)
	if cmd  == CMD.TRAJECTORY then
		local STATE = Spring.GetUnitStates(u)
		local onOff = STATE['trajectory']
		local cmdID = Spring.FindUnitCmdDesc(u, CMD.TRAJECTORY)
		if cmdID == nil then return CMD.TRAJECTORY end
		if  onOff == true then
			Spring.EditUnitCmdDesc(u, cmdID, {
			name="",
			onlyTexture=true,
			texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/trajectory_low.png",
		})
		end
		if onOff == false then
			Spring.EditUnitCmdDesc(u, cmdID, {
			name="",
			onlyTexture=true,
			texture = "&.9x.9&bitmaps/icons/blank.tif&bitmaps/icons/trajectory_high.png",
		})
		end
		return CMD.TRAJECTORY
		end
---------------------------------------------------------------------------------------END TRAJECTORY
	return true
end

else
end