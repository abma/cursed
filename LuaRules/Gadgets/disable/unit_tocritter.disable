function gadget:GetInfo()
  return {
    name      = "To-Critter Spell",
    desc      = "To-Critter Spell",
    author    = "CarRepairer",
    date      = "2009-12-13",
    license   = "GNU GPL, v2 or later",
    layer     = 1,
    enabled   = true,
  }
end


local echo 			= Spring.Echo

if gadgetHandler:IsSyncedCode() then
-------------------------------------
----- SYNCED -----

local spGetUnitDefID 			= Spring.GetUnitDefID
local spGetUnitRulesParam		= Spring.GetUnitRulesParam
local spSetUnitRulesParam		= Spring.SetUnitRulesParam

local critterWeapons = {}
local followup_to = {}
local followup_from = {}
local to_critter = {}
local critters_units = {}
local units_critters = {}

local critterdefs_i = {
	UnitDefNames['pig'].id,
}
local critterdefs = {}
for _,udid in ipairs(critterdefs_i) do
	critterdefs[udid] = true
end
local critter_type_count = #critterdefs_i

local crittering_units = {}


Spring.SetGameRulesParam("critter",1)

function gadget:UnitCreated(unitID, unitDefID, unitTeam)

end
function gadget:UnitDestroyed(unitID, unitDefID, unitTeam)
	local critunit = critters_units[unitID] 
	if critunit then
		critters_units[unitID] = nil
		units_critters[critunit] = nil
		Spring.DestroyUnit(critunit, false, true)
	end
end

function gadget:Initialize()
	for i=1,#WeaponDefs do	 
		--echo (WeaponDefs[i].description)
		if (WeaponDefs[i].description == 'Critterzap') then
			critterWeapons[i] = true
		end
	end
end


function gadget:UnitPreDamaged(unitID, unitDefID, unitTeam, fullDamage, paralyzer, weaponID, attackerID, attackerDefID, attackerTeam)
	if not critterWeapons[weaponID] then
		return fullDamage 
	end
	if not critterdefs[unitDefID] then
		local _, maxhealth = Spring.GetUnitHealth(unitID)
		local critterdamage = fullDamage/maxhealth
		local critterlevel = spGetUnitRulesParam(unitID,"critter") or 0
		local newcritterlevel = critterlevel + critterdamage
		crittering_units[unitID] = true
		if newcritterlevel > 1 then
			to_critter[unitID] = true
			newcritterlevel = 1
		end
		spSetUnitRulesParam(unitID,"critter", newcritterlevel)
		
	end
	return 0
end


local function ToCritter(unitID)
	local unitDefID = Spring.GetUnitDefID(unitID)
	local canbetransmuted = UnitDefs[unitDefID].customParams.canbetransmuted	
	if canbetransmuted ~= nil or canbetransmuted == false then
		local x,y,z = Spring.GetUnitPosition(unitID)
		local crit_type = math.ceil(critter_type_count * math.random())
		local critID = Spring.CreateUnit(critterdefs_i[crit_type], x,y,z, 0, Spring.GetGaiaTeamID())
		Spring.SetUnitNeutral(critID)
		
		SendToUnsynced('hideunit', unitID)
		SendToUnsynced('setselectable', unitID, false)
		Spring.SetUnitCloak(unitID, 4, 0)
		
		local MC = Spring.MoveCtrl
		MC.Enable(unitID)
		MC.SetPosition(unitID, x, y-1000, z)
		
		units_critters[unitID] = critID
		critters_units[critID] = unitID
		
		local health, maxhealth = Spring.GetUnitHealth(unitID)
		
		Spring.SetUnitMaxHealth(critID, maxhealth)
		Spring.SetUnitHealth(critID, health)
		
		followup_to[unitID] = health
	end
end

local function FromCritter(unitID)
	local critID = units_critters[unitID]
	
	local x,y,z = Spring.GetUnitPosition(critID)
	
	
	SendToUnsynced('showunit', unitID)
	SendToUnsynced('setselectable', unitID, true)
	Spring.SetUnitCloak(unitID, 0, 0)
	
	local MC = Spring.MoveCtrl
	MC.SetPosition(unitID, x, y, z)
	MC.Disable(unitID)
	
	units_critters[unitID] = nil
	critters_units[critID] = nil
	
	local health = Spring.GetUnitHealth(critID)
	
	Spring.DestroyUnit(critID, false, true)
	
	Spring.SetUnitHealth(unitID, health)
	
	followup_from[unitID] = health
end

function gadget:GameFrame(f)
		
	if f % 32 < 0.1 then
		for unitID, health in pairs(followup_to) do
			if Spring.ValidUnitID(unitID) then
				Spring.SetUnitHealth(unitID, { paralyze = 9999 })
				Spring.SetUnitHealth(units_critters[unitID], health)
			end
		end
		followup_to = {}

		for unitID, health in pairs(followup_from) do
			Spring.SetUnitHealth(unitID, { paralyze = 0, health = health })
		end
		followup_from = {}

		for unitID, _ in pairs(to_critter) do
			ToCritter(unitID)
		end
		to_critter = {}
		
		for unitID, _ in pairs(crittering_units) do
			local critterlevel = spGetUnitRulesParam(unitID,"critter") or 0
			local newcritterlevel = critterlevel - 0.01
			if newcritterlevel <= 0 then
				newcritterlevel = 0
				crittering_units[unitID] = nil
				if units_critters[unitID] then
					FromCritter(unitID)
				end
			end
			spSetUnitRulesParam(unitID,"critter", newcritterlevel)
		end
	end
	
end
----- SYNCED -----
-------------------------------------
else
-------------------------------------
----- UNSYNCED -----



----- UNSYNCED -----
-------------------------------------
end


