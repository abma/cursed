function gadget:GetInfo()
  return {
	 name = "GLSL Lighting",
	 desc = "The P.U.R.E. GLSL Realtime lighting implementation.",
	 author = "Argh",
	 date = "November 7, 2008",
	 license = "Public Domain, or the least-restrictive rights in your country of residence",
	 layer = -20,
	 enabled  = true -- loaded by default?
  }
end

if (gadgetHandler:IsSyncedCode()) then
----------------------------------------------------------------------------------------------------------SYNCED
local function CreateLightMe(u, ud, team, p, r, g, b, a)
	p = Spring.GetUnitScriptPiece(u,p)
	r = r / 255
	g = g / 255
	b = b / 255
	a = a / 255
	SendToUnsynced("CreateLight",u, ud, team, p, r, g, b, a)
end

local function DestroyLightMe(u, ud, team)
	SendToUnsynced("DestroyLight",u, ud, team)
end

function GG.CreateLightMe(u, ud, team, p, r, g, b, a)
	CreateLightMe(u, ud, team, p, r, g, b, a)
end
function GG.DestroyLightMe(u, ud, team)
	DestroyLightMe(u, ud, team)
end

function gadget:Initialize()
	gadgetHandler:RegisterGlobal("CreateLightMe", CreateLightMe)
	gadgetHandler:RegisterGlobal("DestroyLightMe", DestroyLightMe)
end

function gadget:UnitDestroyed(u,ud,team)
	SendToUnsynced("DestroyLight",u, ud, team)
end

----------------------------------------------------------------------------------------------------------END SYNCED
else
----------------------------------------------------------------------------------------------------------UNSYNCED

----------------------------------------------------------------------------------------------------------INITIALIZE SHADER
function gadget:Initialize()
   if(gl.CreateShader == nil) then
      Spring.Echo("GLSL Light Shader Failed")
      gadgetHandler:RemoveGadget()
      return false
   end

GLSL_LIGHT_Shader = gl.CreateShader({
    vertex = [[
varying vec4 diffuse;
void main()
{
   gl_Position = ftransform();
   vec3 normal = gl_NormalMatrix * gl_Normal;
   vec3 lightVector = gl_LightSource[1].position.xyz - ((gl_ModelViewMatrix * gl_Vertex).xyz);
   float dist = length(lightVector);
   float attenuation = 1.0 / (gl_LightSource[1].constantAttenuation +
      gl_LightSource[1].linearAttenuation * dist +
      gl_LightSource[1].quadraticAttenuation * dist * dist);
   lightVector = normalize(lightVector);
   float nxDir = max(0.0, dot(normal, lightVector));
   diffuse = (gl_FrontMaterial.diffuse.xyzw) * (nxDir * attenuation);
}

]],
   fragment = [[
   varying vec4 diffuse;
   void main()
   {
      gl_FragColor = (gl_LightSource[1].ambient + diffuse);
   }
    ]],
})

   if (GLSL_LIGHT_Shader == nil) then
      Spring.Echo("GLSL Light Shader Failed"..gl.GetShaderLog())
	gadgetHandler:RemoveGadget()
      return false
   else
      Spring.Echo("GLSL Light Shader Succeeded")

      UseShader = 1;
   end
end
----------------------------------------------------------------------------------------------------------END INITIALIZE

----------------------------------------------------------------------------------------------------------LIGHT LIST HANDLER
local tinsert = table.insert
local tremove = table.remove
local LightList = {piece, red, green, blue, alpha}
local GetUnitPiecePosDir = Spring.GetUnitPiecePosDir

function gadget:RecvFromSynced(name, u, ud, team, p, r, g, b, a)
	if name == "CreateLight" then
		if LightList[u] ~= nil then
			LightList[u] = nil
			--Spring.Echo("table removed")
		end
		tinsert(LightList,u,{piece = p, red = r, green = g, blue = b, alpha = a})
	end
	if name == "DestroyLight" then
		if LightList[u] ~= nil then
			LightList[u] = nil
			--Spring.Echo("table removed by Destroy")
		end
	end
end
----------------------------------------------------------------------------------------------------------END LIGHT LIST HANDLER

----------------------------------------------------------------------------------------------------------RENDERING	
local x,y,z = 0,0,0
local glDepthTest = gl.DepthTest
local GL_LEQUAL = GL.LEQUAL
local  glCulling =  gl.Culling
local GL_BACK = GL.BACK
local glBlending = gl.Blending
local glLighting = gl.Lighting
local GetUnitPiecePosDir = Spring.GetUnitPiecePosDir
local glLight = gl.Light
local GL_POSITION = GL.POSITION
local glMaterial = gl.Material
local glUseShader = gl.UseShader
local glPolygonOffset = gl.PolygonOffset
local glUnit = gl.Unit
local glResetState = gl.ResetState
local GetVisibleUnits = Spring.GetVisibleUnits
local GetUnitLosState = Spring.GetUnitLosState
local myTeam = Spring.GetLocalAllyTeamID()
local myState

function gadget:DrawWorld()
	if UseShader == 1 then
	local myIDList = GetVisibleUnits(-1,3000,false)
		if myIDList[1] ~= nil then
			for _,myID in ipairs(myIDList) do
				myState = GetUnitLosState(myID,myTeam)
				if  myState["los"] == true then
					if LightList[myID] ~= nil then
						glDepthTest(GL_LEQUAL)
						glCulling(GL_BACK)
						glBlending(true)
						glLighting(true)
						
						x,y,z = GetUnitPiecePosDir(myID,LightList[myID].piece)

						glLight(1,GL_POSITION,x or 0,y or 100,z or 0,1)
						glMaterial ({
						ambient	= {0, 0, 0, 0},
						diffuse	= {LightList[myID].red,LightList[myID].green,LightList[myID].blue,LightList[myID].alpha},
						ambidiff  = {0, 0, 0, 0},
						emission  = {0, 0, 0, 0},
						specular  = {0, 0, 0, 0},
						shininess = 10
						})
						glUseShader(GLSL_LIGHT_Shader)
						glPolygonOffset(-10,-10)
						glUnit(myID,true)
						
						glLight(0,false)
						glPolygonOffset(0,0)
						glResetState()
						glLighting(false)
					end
				end
			end
		end
	end	
end
----------------------------------------------------------------------------------------------------------END
end