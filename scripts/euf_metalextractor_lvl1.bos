#include "basic_spring_stuff.h"

piece  base, bottom, tamper, center, door_l, door_r;

static-var  structureheight, Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, statechg_DesiredState, statechg_StateChanging;

#define BOOM		1024+0
#define STRUCTUREBUILDING		1025+0

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from bottom;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Animation()
{
	while( TRUE )
	{
		if( Static_Var_2 >= 0 AND Static_Var_1 == 1 )
		{
			spin tamper around y-axis speed Static_Var_2 accelerate Static_Var_3;
			move tamper to y-axis [7.000000] speed Static_Var_2 * [0.000079];
			wait-for-move tamper along y-axis;
			move tamper to y-axis [0.000000] speed Static_Var_2 * [0.000079];
			wait-for-move tamper along y-axis;
		}
		stop-spin tamper around y-axis decelerate Static_Var_4;
		sleep 1;
	}
}

Go()
{
	turn door_r to z-axis <120.000000> speed <50.000000>;
	turn door_l to z-axis <-120.000000> speed <50.000000>;
	wait-for-turn door_l around z-axis;
	wait-for-turn door_r around z-axis;
	move center to y-axis [15.000000] speed [3.000000];
	wait-for-move center along y-axis;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	move tamper to y-axis [0.000000] speed [7.000000];
	move center to y-axis [0.000000] speed [7.000000];
	wait-for-move tamper along y-axis;
	wait-for-move center along y-axis;
	turn door_r to z-axis <0.000000> speed <60.000000>;
	turn door_l to z-axis <0.000000> speed <60.000000>;
	wait-for-turn door_l around z-axis;
	wait-for-turn door_r around z-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_2 = 0;
	Static_Var_3 = 91;
	Static_Var_4 = 182;
	Static_Var_1 = 0;
	call-script InitState();
	//////////////////////////////////START BUILD CYCLE
	structureheight	= (get UNIT_HEIGHT)*(-1);
	move bottom to y-axis structureheight now;
	while( get BUILD_PERCENT_LEFT )
	{
		move bottom to y-axis (structureheight * (get BUILD_PERCENT_LEFT)/100) speed [10];
		emit-sfx STRUCTUREBUILDING from base;
		sleep 100;
	}
	move bottom to y-axis 0 speed [10];
	/////////////////////////////////END BUILD CYCLE	
	start-script SmokeUnit();
	start-script Animation();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = bottom;
}

SetSpeed(Func_Var_1)
{
	Static_Var_2 = Func_Var_1 * 45;
}

Killed(severity, corpsetype)
{
	var Func_Var_3;
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode bottom type BITMAPONLY | 10000001;
		return (corpsetype);
	}
	else
	{
		corpsetype = 2;
		return (corpsetype);
	}
}
